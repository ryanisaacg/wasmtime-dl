use crate::ParamType;

use libloading::{Library, Symbol};
use thiserror::Error;
use wasmparser::{BinaryReaderError, Parser, Payload, ValType};
use wasmtime::{AsContextMut, Caller, Engine, Extern, FuncType, Linker, ValRaw};

pub unsafe fn bind(
    linker: &mut Linker<()>,
    module: &str,
    wasm_name: &str,
    lib: &'static Library,
    lib_name: &[u8],
    ty: FuncType,
    params: &[ParamType],
    returns: Option<ParamType>,
) {
    match (&params[..], returns) {
        ([], Some(ParamType::I32 | ParamType::Pointer)) => {
            let func: Symbol<unsafe extern "C" fn() -> i32> = lib.get(lib_name).unwrap();

            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func();
                    Ok(())
                })
                .unwrap();
        }
        ([], Some(ParamType::F32)) => {
            let func: Symbol<unsafe extern "C" fn() -> f32> = lib.get(lib_name).unwrap();

            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func();
                    Ok(())
                })
                .unwrap();
        }
        ([], Some(ParamType::I64)) => {
            let func: Symbol<unsafe extern "C" fn() -> i64> = lib.get(lib_name).unwrap();

            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func();
                    Ok(())
                })
                .unwrap();
        }
        ([], Some(ParamType::F64)) => {
            let func: Symbol<unsafe extern "C" fn() -> f64> = lib.get(lib_name).unwrap();

            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func();
                    Ok(())
                })
                .unwrap();
        }
        ([], None) => {
            let func: Symbol<unsafe extern "C" fn()> = lib.get(lib_name).unwrap();

            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func();
                    Ok(())
                })
                .unwrap();
        }
        ([t0 @ (ParamType::I32 | ParamType::F32)], Some(ParamType::I32 | ParamType::Pointer)) => {
            let func: Symbol<unsafe extern "C" fn(i32) -> i32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i32(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        ([t0 @ (ParamType::I32 | ParamType::F32)], Some(ParamType::F32)) => {
            let func: Symbol<unsafe extern "C" fn(i32) -> f32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i32(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        ([t0 @ (ParamType::I32 | ParamType::F32)], Some(ParamType::I64)) => {
            let func: Symbol<unsafe extern "C" fn(i32) -> i64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i32(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        ([t0 @ (ParamType::I32 | ParamType::F32)], Some(ParamType::F64)) => {
            let func: Symbol<unsafe extern "C" fn(i32) -> f64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i32(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        ([t0 @ (ParamType::I32 | ParamType::F32)], None) => {
            let func: Symbol<unsafe extern "C" fn(i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i32(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64) -> i32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i64(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        ([t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)], Some(ParamType::F32)) => {
            let func: Symbol<unsafe extern "C" fn(i64) -> f32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i64(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        ([t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)], Some(ParamType::I64)) => {
            let func: Symbol<unsafe extern "C" fn(i64) -> i64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i64(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        ([t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)], Some(ParamType::F64)) => {
            let func: Symbol<unsafe extern "C" fn(i64) -> f64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i64(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        ([t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)], None) => {
            let func: Symbol<unsafe extern "C" fn(i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(arg_i64(&_args[0], &mut _cal, t0));
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32) -> i32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32) -> f32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32) -> i64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32) -> f64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64) -> i32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64) -> f32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64) -> i64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64) -> f64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32) -> i32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32) -> f32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32) -> i64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32) -> f64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64) -> i32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64) -> f32> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64) -> i64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64) -> f64> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64)> = lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i32, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i32, i64, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i32, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I32 | ParamType::F32), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i32, i64, i64, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i32(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i32, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I32 | ParamType::F32), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i32, i64, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i32(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I32 | ParamType::F32), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i32, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i32(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I32 | ParamType::F32), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i32, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i32(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I32 | ParamType::F32), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i32, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i32(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I32 | ParamType::F32), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i32, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i32(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I32 | ParamType::F32), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i32, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i32(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i32) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i32) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i32) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i32) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I32 | ParamType::F32)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i32)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i32(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I32 | ParamType::Pointer),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i64) -> i32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F32),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i64) -> f32> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::I64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i64) -> i64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            Some(ParamType::F64),
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i64) -> f64> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }
        (
            [t0 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t1 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t2 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t3 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t4 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t5 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t6 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer), t7 @ (ParamType::I64 | ParamType::F64 | ParamType::Pointer)],
            None,
        ) => {
            let func: Symbol<unsafe extern "C" fn(i64, i64, i64, i64, i64, i64, i64, i64)> =
                lib.get(lib_name).unwrap();
            let t0 = *t0;
            let t1 = *t1;
            let t2 = *t2;
            let t3 = *t3;
            let t4 = *t4;
            let t5 = *t5;
            let t6 = *t6;
            let t7 = *t7;
            linker
                .func_new_unchecked(module, wasm_name, ty, move |mut _cal, _args| {
                    func(
                        arg_i64(&_args[0], &mut _cal, t0),
                        arg_i64(&_args[1], &mut _cal, t1),
                        arg_i64(&_args[2], &mut _cal, t2),
                        arg_i64(&_args[3], &mut _cal, t3),
                        arg_i64(&_args[4], &mut _cal, t4),
                        arg_i64(&_args[5], &mut _cal, t5),
                        arg_i64(&_args[6], &mut _cal, t6),
                        arg_i64(&_args[7], &mut _cal, t7),
                    );
                    Ok(())
                })
                .unwrap();
        }

        _ => unimplemented!(),
    }
}

fn arg_i32(arg: &ValRaw, caller: &mut Caller<'_, ()>, ty: ParamType) -> i32 {
    match ty {
        ParamType::F32 => bytemuck::cast(f32::from_bits(arg.get_f32())),
        ParamType::Pointer => mem_ptr(caller) as i32 + arg.get_i32(),
        _ => arg.get_i32(),
    }
}

fn mem_ptr(caller: &mut Caller<'_, ()>) -> usize {
    let Extern::Memory(mem) = caller.get_export("memory").unwrap() else {
        unreachable!();
    };
    let store = caller.as_context_mut();
    mem.data_ptr(store) as usize
}

fn ret_i32(val: i32, ty: ParamType) -> ValRaw {
    if ty == ParamType::F32 {
        let val: u32 = bytemuck::cast(val);
        dbg!(val);
        let val: f32 = dbg!(bytemuck::cast(val));
        ValRaw::f32(val.to_bits())
    } else {
        ValRaw::i32(val)
    }
}

fn arg_i64(arg: &ValRaw, caller: &mut Caller<'_, ()>, ty: ParamType) -> i64 {
    match ty {
        ParamType::F64 => bytemuck::cast(f64::from_bits(arg.get_f64())),
        ParamType::Pointer => bytemuck::cast(mem_ptr(caller) as usize + arg.get_i32() as usize),
        _ => arg.get_i64(),
    }
}

fn ret_i64(val: i64, ty: ParamType) -> ValRaw {
    if ty == ParamType::F64 {
        let val: f64 = bytemuck::cast(val);
        ValRaw::f64(val.to_bits())
    } else {
        ValRaw::i64(val)
    }
}
